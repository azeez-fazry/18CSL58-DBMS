/*
	SALESMAN (Salesman_id, Name, City, Commission)
	CUSTOMER (Customer_id, Cust_Name, City,
	Grade,Salesman_id)
	ORDERS (Ord_No, Purchase_Amt, Ord_Date, Customer_id,
	Salesman_id)

	Write SQL queries to
	1. Count the customers with grades above Bangalore saverage.

		SELECT COUNT(CUSTOMER_ID) TOTAL
    	FROM CUSTOMER
    	WHERE ASCII(GRADE) < (SELECT AVG(ASCII(GRADE))
    	FROM CUSTOMER
    	WHERE CITY = 'BANGALORE');

	2. Find the name and numbers of all salesmen who had more than one customer.

		SELECT S.SALESMAN_ID,S.NAME
    	FROM CUSTOMER NATURAL JOIN SALESMAN S;

	3. List all salesmen and indicate those who have and donâ€™t have customers in
	their cities (Use UNION operation.)
		
		SELECT S.SALESMAN_ID,NAME,S.CITY,CUSTOMER_ID
		FROM CUSTOMER C JOIN SALESMAN S
		WHERE C.CITY = S.CITY AND S.SALESMAN_ID = C.SALESMAN_ID
		UNION
		SELECT S.SALESMAN_ID,NAME,S.CITY,'NO MATCH'
		FROM CUSTOMER C JOIN SALESMAN S
		WHERE C.CITY <> S.CITY AND S.SALESMAN_ID = C.SALESMAN_ID;
		
	4. Create a view that finds the salesman who has the customer with the highest
	order of a day.
		
		SELECT ORD_NO,PURCHASE_AMT
    	FROM ORDERS;

	5. Demonstrate the DELETE operation by removing salesman with id 1000. All his
	orders must also bedeleted.
*/

DROP DATABASE IF EXISTS LAB2;
CREATE DATABASE LAB2;
USE LAB2;


DROP TABLE IF EXISTS SALESMAN;
CREATE TABLE SALESMAN (
	SALESMAN_ID INT (10) PRIMARY KEY,
	NAME VARCHAR (20),
	CITY VARCHAR (20),
	COMMISION VARCHAR (20)
);


DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER(
	CUSTOMER_ID INT (10) PRIMARY KEY,
	CUST_NAME VARCHAR (20),
	CITY VARCHAR (20),
	GRADE CHAR (1),
	SALESMAN_ID INT (10)
);


DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS (
	ORD_NO INT (10) PRIMARY KEY,
	PURCHASE_AMT DECIMAL (10, 2),
	ORD_DATE DATE,
	CUSTOMER_ID INT (10),
	SALESMAN_ID INT (10)
);


ALTER TABLE CUSTOMER ADD FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE CASCADE;
ALTER TABLE ORDERS
	ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON DELETE CASCADE,
	ADD FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE CASCADE;


INSERT INTO SALESMAN VALUES (1000, 'JOHN','BANGALORE','25 %');
INSERT INTO SALESMAN VALUES (2000, 'RAVI','BANGALORE','20 %');
INSERT INTO SALESMAN VALUES (3000, 'KUMAR','MYSORE','15 %');
INSERT INTO SALESMAN VALUES (4000, 'SMITH','DELHI','30 %');
INSERT INTO SALESMAN VALUES (5000,'HARSHA','HYDRABAD','15 %');

INSERT INTO CUSTOMER VALUES (10,'PREETHI','BANGALORE','A',1000);
INSERT INTO CUSTOMER VALUES (11,'VIVEK','MANGALORE','C',1000);
INSERT INTO CUSTOMER VALUES (12,'BHASKAR','CHENNAI','D',2000);
INSERT INTO CUSTOMER VALUES (13,'CHETHAN','BANGALORE','B',2000);
INSERT INTO CUSTOMER VALUES (14,'MAMATHA','BANGALORE','D',3000);

INSERT INTO ORDERS VALUES (50, 5000, '2017-05-04', 10, 1000);
INSERT INTO ORDERS VALUES (51, 450, '2017-01-20', 10, 2000);
INSERT INTO ORDERS VALUES(52,1000,'2018-02-24',13,2000);
INSERT INTO ORDERS VALUES(53,3500,'2018-01-20',14,3000);
INSERT INTO ORDERS VALUES (54, 550, '2018-03-09', 12, 2000);
